Follow directions in compile.

Can not wire to anything. Demo purposes only.

Two files. One for structure, one for style. 

== Structure File
Includes widget-attached text (as in the HTRML concept of text nodes). 

One line for each object.

type#id.class.sClass;text

~~ sClass 
:: is a class that identifies structural rather than display elements. Currently used for grouping radiobuttons.
~~ Text 
:: is text associated with the widget (button/label text etc.)

Don't repeat a mark previous to a linebreak mark, but you can use one afterwards. This is ok, the dot in ''.png' will not be seen as a class mark,

        IconButton|/home/rob/Code/GUIBuilder/arrow.png

but this id with a bar in it is not ok,

        IconButton#my|friend.hotspot|Huzzah

Lines are indented, causing nesting,

TopWin
  HBox
    Button|On
    Button|Off

First object must be a TopWin, and currently always a TopWin

=== Tweaks 
To add the multiple texts for a SelectEntry, use the vertical bar,

        SelectEntry;Selection 1|Selection 2|Selection 3

To initially select a RadioButton (from a group), or select an item from a SelectEntry, preceed the name with an exclaimation.
 
      HBox
        RadioButton*group1|Left
        RadioButton*group1|!Right

"Right" is initially selected.


== Style File
Very few widgets accept style of any kind. There is some markup for labels, and padding on some objects. 

Style is like a css file

WidgetName {
}

#id {
  padding: 30;
  }

.class {
  color: yellow;
  }

== Example
You need a commandline like,

./builder.py -v -ss test_style test_widget_gallery_struct 

To debug/lint, add the -l/--lint option,

./builder.py -vl -ss test_style test_widget_gallery_struct

Then compile with the meson/ninja builder.

== Before you get to say anything...
Yes, I know of GTKBuilder, Glade, and so much more.

== Current state
Parsers fairly robust, allow whitespace and variable indents. Linting helpful but not comprehensive. Widget sets only for the smallest and most limited of interfaces. 

Fun. Fun? Fun.

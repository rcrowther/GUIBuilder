
== What is it?
Build GTK GUIs by using two config files. Currently generates C code.

Quite possible to add extra modules to produce other code, e.g. Python GTK code. Also generate code for other toolkits e.g. QT. But unlikely I'll do that.


=== Current state
Can not wire to anything. Demo or base-code purposes only.

Parsers fairly robust, allowing whitespace and variable indents. Linting helpful but not comprehensive. Widget sets only for the smallest and most limited of interfaces.

== Setup
Follow directions in compile.

Have a look at the commandline help. The options include linting/debugging of the config files, and information from the code itself.


== Config
Two files. One for structure, one for style. 


=== Structure File
Includes widget-attached text (as in the HTRML concept of text nodes). 

One line for each object.

type#id.class.sClass;text

~~ sClass 
:: is a class that identifies structural rather than display elements. Currently used for grouping radiobuttons.
~~ Text 
:: is text associated with the widget (button/label text etc.)

Don't repeat a mark previous to a linebreak mark, but you can use one afterwards. This is ok, the dot in ''.png' will not be seen as a class mark,

        IconButton|/home/rob/Code/GUIBuilder/arrow.png

but this id with a bar in it is not ok,

        IconButton#my|friend.hotspot|Huzzah

Lines are indented, causing nesting,

TopWin
  HBox
    Button|On
    Button|Off

First object must be a TopWin, and currently always a TopWin

==== Tweaks 
To add the multiple texts for a SelectEntry, use a semi-colon,

        SelectEntry|Selection 1;Selection 2;Selection 3

Only has effect on SelectEntry text.

To initially select a RadioButton (from a group), a CheckBox, or an item from a SelectEntry, preceed the text with an exclaimation.
 
      HBox
        RadioButton*group1|Left
        RadioButton*group1|!Right

So "Right" is initially selected.

Default size for widgets is natural height, not to expand. To allow a widget to expand, use a ''+' before the widgetname,

      VBox
        Label
        +TextArea
        Button

TextArea will expand.


=== Style File
Very few widgets accept style of any kind. There is some markup for labels, and padding on some objects. 

Style is like a CSS file

WidgetName {
}

#id {
  padding: 30;
  }

.class {
  color: yellow;
  }

== Example
You need a commandline like,

./builder.py -v -ss test_style test_widget_gallery_struct 

To debug/lint, add the -l/--lint option,

./builder.py -vl -ss test_style test_widget_gallery_struct

Then compile with the meson/ninja builder.


== Before you get to say anything...
Yes, I know of GTKBuilder https://developer.gnome.org/gtk3/stable/GtkBuilder.html, Glade https://glade.gnome.org/, QMLhttps://en.wikipedia.org/wiki/QML etc.
 

Fun. Fun? Fun.
